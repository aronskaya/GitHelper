SHA-1 — алгоритм, который вычисляет в Git контрольную сумму
Контрольная сумма — 40-символьное 16-ричное число = commit id 
Сокращенная контрользая сумма не меньше 4 первых символов. В среднем 8–10 достаточно
HEAD — указатель на последний коммит в текущей ветке. тот, который станет родителем следующего коммита.

Указатель на родительский коммит:
f635b5aec66e^		каретка говорит гиту, что нужно найти родителя данного коммита
HEAD^			указатель на коммит, родительский по отношению к HEAD
HEAD~1			цифра указывает, на сколько поколений вверх идем
HEAD~			по умолчанию идем на 1 поколение вверх

Указатель на коммит-«дедушку» (grandparent commmit)
f635b5aec66e^^
HEAD^^ 
HEAD~2

=======================================

Команды Git
git help			выводит список основных команд
git init			инициализируем пустой репозиторий. команда вызывается, когда мы находимся внутри:
	Julias-MacBook-Pro:~ aronskaya$ cd Documents/first_git_project/
	Julias-MacBook-Pro:first_git_project aronskaya$ git init
	Initialized empty Git repository in /Users/aronskaya/Documents/first_git_project/.git/
	Однако файлы при это в репозиторий не добавляются

git add .			добавляет все изменения в текущей директории (мы должны быть в директории проекта)
git add second_file.txt	добавляет файл в staging directory
git add tours/			добавляет всю директорию
git commit -m "Initial commit" делаем коммит добавленными ранее изменениями с комментарием Initial commit
git commit -a			добавляет в staging index И сразу же коммитит (файлы, которые удалены, и которые не отслеживаются, в коммит не попадают). Используется для коммита изменений, не для коммита удаления/добавления файлов
git commit -am "Comment"	то же самое, но сразу с комментарием
git commit --amend -m "Comment"	заменяет последний коммит, вливая в него последний add
git commit --amend -m "new com"	если ничего нет в staging, то меняет только комментарий к коммиту (и контрольную сумму, конечно)
git log				выводит историю коммитов
git log -n [число]		выведет указанное количество последних коммитов
git log --since=2012-06-15	выводит коммиты, начиная с указанной даты
git log --until=2012-07-15	выводит коммиты, сделанные до указанной даты
git log --author="Kevin"	выводит коммиты автора (указана только часть имени)
git log --grep="Init"		Global Regular Expression Search, выводит коммиты, в message к которым есть данный текст (ищет регулярным выражением)

git status			сообщает разницу между 3 деревьями: рабочей директорией, staging index и репозиторием

git rm file.txt			удаляет файл из рабочей директории И добавляет в staging index команду на удаление файла из репозитория

git checkout -- index.html	заменяет файл в рабочей директории на версию из репозитория (-- значит, что мы не меняем ветку, остаемся на текущей)

git checkout 20b0b8898fd6f8cefedadafc8aae43728a69f977 -- text.txt
				запрашиваем из репозитория файл text.txt в состоянии, в котором он был на момент коммита 20b0b8898fd6... Файл сразу помещается в staged (рабочая директория не обновляется!)

git reset HEAD test.txt		удаляем файл test.txt из staging index

git revert 20b0b8898f...	делает коммит, отменяющий старый коммит с указанной контрольной суммой

git clean -n			«тестовый запуск» удаления файлов, которые не отслеживаются (их нет в репозитории, но есть в рабочей директории и мы не хотим их коммитить, мы хотим удалить). -n не удаляет — команда выводит сообщение о том, что будет удалено, а что останется. Файлы из staging index 
команда git clean не трогает.

git clean -f			удаляет то, что описал -n

git rm --caсhed text.txt	удаляет файл из списка отслеживаемых (staging index) — добавляет задание на delete данный файл. После коммита файл остается у нас в рабочей директории. Если при этом файл добавлен в .gitignore (и данный файл закоммичен), то git больше не будет его отслеживать. Команда (в сочетании с внесением в .gitigopre) используется, если файл уже отслеживается, и мы не хотим следить за ним больше.

git ls-tree HEAD		выводит список файлов указанного tree-ish (мы можем давать ссылку на HEAD, а также на другие коммиты по контрольной сумме)
git ls-tree master		выводит список файлов в master branch
git ls-tree master assets/	выводит содержимое указанной директории из данной ветки
git ls-tree master^ assets/	выводит то же, но для предыдущего коммита

Пример вывода:
Julias-MacBook-Pro:explore_california aronskaya$ git ls-tree HEAD
100644 blob 20badc91b68b7943ae3fef5a8a9b577eb9647b1f	.gitignore
100644 blob fd6e37a342c5bc5c22c92a5097abf17e72d9d3f0	1.txt
040000 tree f504912e05a9dad1623270fd901afb680ccfb6d5	assets
100755 blob f6b759b3808511e90a5d9414f92351255e91510d	contact.html
100755 blob 769731de516dbbf73c73c9e9c52e8b47b6e7412c	explorers.html
100755 blob 409068c10434cb2fe4128f0bea9a49b103f9dd1c	index.html
100755 blob b79f44da37b9191a5be0a6ac998821bd5b9e21a1	mission.html
100755 blob 3f3c2b8ac2323c33827cb5d41d3e3711b86cdd99	resources.html
040000 tree 5a73ff472748a4e8b9e4249a560d552cc7d19742	resources
100755 blob eb6514e4431f0d8b51752052be8833880aba6596	support.html
100644 blob 2376c005258fd5f151f11f645b3fc1f212f1a60a	temporary.txt
100755 blob caa9b4c665fd31e086c2cf8aeee13a5436a65110	tours.html
040000 tree 68fff755bb02e48f0bfa8ca892d873bea717a8c7	tours

, где:
tree — директория (она же tree-ish)
blob — файл

Таким образом, мы можем использовать контрольные суммы tree как ссылки на эти директории.
Команда:
git ls-tree 68fff755bb02e48 

Выдаст содержание tours:
100755 blob efbde7c6829477f6e9845e0ea...	tour_detail_bigsur.html
100755 blob f7cc6efde892ae9b4cd623cd4...	tour_detail_backpack_cal.html

=======================================

Команда GIT SHOW

Принимает в кач-ве аргументов commits, blobs, trees and tags

git show d3a02293da27		показывает подробно данный коммит, включая diff
git show --format=oneline HEAD	показывает сокращенно данные по коммиту	
git show --format=oneline HEAD^
git show --format=oneline HEAD~3

=======================================

Команда GIT LOG

git log --oneline 		удобно выводит все коммиты в сжатом виде
git log --oneline -3		выведет последние 3 коммита
git log --oneline origin/master	выводит лог по ветке master репозитория origin (локальной копии удаленного репозитория)

git log --format=oneline	отличается тем, что выводит полный SHA
git log --format=short		выводит коммиты в короткой форме
git log --format=medium		выводит со средней детализацией
git log --format=full		выводит с большой детализацией
git log --format=fuller		ну ваще
git log --format=email		удобно, чтобы написать письмо о коммите
From d3a02293da276a18aea72c79e7ad5bdffd09172a Mon Sep 17 00:00:00 2001
From: Julia Vashchenko <aronskaya.yulia@gmail.com>
Date: Tue, 15 Dec 2015 13:24:46 +0200
Subject: [PATCH] Adding 1.txt

git log --format=raw		такой формат:
commit 60859172285fed97e627318a88b93aad600570a4
tree 043d627525af05643b472762e5f46b0f596e3171
parent ec29d5ceb801fd6dd7ecd2191d075937f456a27c
author Julia Vashchenko <aronskaya.yulia@gmail.com> 1450178209 +0200
committer Julia Vashchenko <aronskaya.yulia@gmail.com> 1450178209 +0200

    Adding temp.txt

git log --graph			выводит граф коммитов:
* commit 6ae2fc4558ae7ea9fa51dcc2a9e3fbba0b78f921
| Author: Julia Vashchenko <aronskaya.yulia@gmail.com>
| Date:   Tue Dec 15 14:21:28 2015 +0200
| 
|     Revert "removing 1.txt from staging index"
|     
|     This reverts commit a0047af48fa4d5b75ecbfd6279ac3a94a9e01f4b.
|  
* commit a3e8d3917201d6b12082c4933cdaaae74e784f56
| Author: Julia Vashchenko <aronskaya.yulia@gmail.com>
| Date:   Tue Dec 15 14:20:08 2015 +0200
...

git log --oneline --graph --all --decorate	удобно выводит список коммитов


git log --since="2012-06-20"	выводит коммиты с указанной даты
git log --after="2012-06-20"	синоним since

git log --until="2012-06-20"	выводит коммиты до указанной даты
git log --before="2012-06-20"	синоним until

git log --since="2 weeks ago" --until="3 days ago"
git log --since=2.weeks --until=3.days

git log --author="Kevin"

git log --grep="temp"		выводит все коммиты, в комментах к которым был temp

git log efbde7..f7cc6e		выводит все коммиты в промежутке между указанными (можно добавить --oneline)

git log efbde7 text.txt	выводит список коммитов, в которых менялся данный файл после указанного коммита

git log -p			patch-option (показывает коммиты с указанием, что изменилось — diff)

git log -p efbde7.. text.txt	показывает, что именно менялось в файле с каждым коммитом

Если детали не нужны, просто оценить много ли правок

git log --stat			показывает + и -, сколько строк менялись 
git log --summary		выводит небольшое summary к коммитам


=======================================

Файл .GITIGNORE 

project/.gitignore — файл с перечнем правил, какие файл игнорировать
Это может быть просто список файлов, по одному на строку, или же регулярные выражения, включающие:
*
?
[sdfkjgsk]		набор символов, character set
[0-9]			range символов
!			операция НЕ

Примеры
tempfile.txt		игнорируем файл tempfile.txt
*.php			игнорируем все файлы php
!index.php		не игнорируем index.php
assets/videos/		/ означает, что все файлы в директории будут проигнорированы

# Строки с комментариями начинаются с #

Пустые строки игнорируются. 

Пример содержания файла:
# Comment
tempfile.txt
.DS_Store
*.zip
*.gz
log/*.log		включает только файлы в данной директории. log/archive/access.log НЕ будет игнорироваться, как и другие папки, вложенные в log/
log/*.log.[0-9]
assets/photoshop/
assets/videos/
!assets/videos/tour_*.mp4

Что игнорировать?

1. Файлы со скомпилированным кодом
2. Сжатые файлы (.zip, .gz, образы дисков)
3. Логи и базы данных (они часто меняются)
4. Файлы, сгенерированные операционкой (они не имеют отношения к проекту)
5. Видео, картинки, .PDF, загруженные пользователями (или нами, чтобы протестировать загрузку)

GLOBAL IGNORE
Настраивается для пользователя. Включает файлы, специфичные для ОС.
git config --global core.excludesfile ~/.gitignore_global — мы говорим гиту, что настраиваем глобальные исключения и сообщаем расположение и название файла, в котором будем хранить их. Файл может называться как угодно и лежать где угодно!

Что делать, если в .gitignore добавились новые файлы/папки, за которыми нужно прекратить следить. Варианты:
1. git rm --cached				удаляет файл из staging index, а после коммита — и из репозитория.
					Файл сохраняется в рабочей директории. За его изменениями git больше не следит
2. git update-index --assume-unchanged [path] Вместо [path] вставляем путь к файлу. Гит перестает следит за ним и НЕ удаляет

3. git update-index --assume-unchanged $(git ls-files | tr '\n' ' ')	останавливаем слежение за папками, которые уже есть в репозитории.
Команда ничего не удаляет (!). Перед ее выполнением нужно перейти в папку, за которой хотим остановить слежение.

Подробнее см:
help.github.com/articles/ignoring-files	общие рекомендации
github.com/github/gitignore		много файлов .gitignore для разных языков, операционных систем

=======================================
Конфигурация GIT

Устанавливаем имя и мыло пользователя

git config --global user.name "Julia Vashchenko"
git config --global user.email "aronskaya.yulia@gmail.com"
git config --global core.editor "mate -wl1"				устанавливаем mate редактором по умолчанию с опциями w и l1 (начинать с 1 строки)
git config --global color.ui true	разрешаем гиту использовать цвета в сообщениях

Считываем имя пользователя 
git config user.name

Файлы конфигурации разного уровня лежат в системной папке, в папке юзера и в проекте.

Настройка автокомплита

Нам нужен файл .git-completion.

Shell-script, записывающий .git-completion в .bash_profile:
if [ -f ~/.git-completion.bash ]; then
        source ~/.git-completion.bash
fi

Настройка PS1

Нам понадобится файл git-prompt.sh (https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh)

export PS1=''				то, что в кавычках, будет выводиться вместо prompt string 1
export PS1='$(__git_ps1 "[%s]") > '	будет в качестве PS1 выводить название ветки в квадратных скобках (их можно менять) и >
export PS1='\W$(__git_ps1 "[%s]") > '	добавляет в начало название рабочей директории (эту строку необходимо добавить в .bash_profile)

=======================================

Команды Unix
cd ~					переходим в домашнюю папку
ls -la					показывает дерево папок
ls -la [folder/path]			показывает содержимое папки текущего каталога или папки по указанному пути
		Julias-MacBook-Pro:first_git_project aronskaya$ ls -la .git выводит содержание папки .git
cat .gitconfig 				показывает содержимое файла .gitconfig
cat ~/.gitconfig

mv [старое название] [новое название]	переименовывает файлы (название с путем, напр. mv ~/git-completion.bash ~/.git-completion.bash)
nano .git-completion			открываем файл с помощью редактора Nano
cat .git/HEAD				смотрим, куда указывает HEAD
nano .gitignore				создаем пустой файл .gitignore с помощью nano ИЛИ открываем, если он уже существует
touch file.txt				создаст пустой файл в текущей директории
cd ..					выходим из папки на уровень выше
cd ../folder				идем вверх и сразу же вниз в другую папку
rm -fr .git				удаляет .git (локальный репозиторий)

=======================================

Работа со страницами Git Manual (git help [команда]
git help log			вызывает Git Manual по данной команде
man git-log			делает то же самое
f, [spacebar]			вперед на страницу
b				назад на страницу
q				выйти

=======================================

Добавение коммита:

1. Вносим изменения
2. Добавляем изменения
2. Коммитим в репозиторий с комментарием (message)

Message должно описывать изменения, которые были внеснены.
1. Короткое описание до 50 символов
2. Пустая линия
3. Более подробное описание, каждая строка до 72 символов
4. Пишем с настоящем времени (описываем, что ДЕЛАЕТ коммит, а не что ты ДЕЛАЛ)
It fixes a bug OR fix bug NOT fixed bugs
5. Пункты списков маркируем - или *
6. У компаний могут быть стандарты, напр. начинать коммит с
[css, js] — коммит меняет css и js файлы
[bugfix]
[#463727] — номер тикета, по которому велась работа

Примеры-аналоги

Хорошие:
Add missing > in project section of HTML
Change user authefication to use Blowfish
Плохие:
Fix typo
Update login code

Хороший пример
t23094 - Fixes bugs in admin logout

When an admin logged out of the admin area, they
could not log in to the members area because their
session[:user_id] was still set to the admin ID. This patch
fixes the bug by setting session[:user_id] to nik when
any user logs out of any area.

=======================================

GIT DIFF
--- репозиторий
+++ рабочая версия

\ No newline at end of file — в конце файла нет пустых строк

git diff			показывает разницу между staging index И рабочей директорией (что мы сделали, но еще не заstag'или)
git diff first_file.txt	покажет изменения в конкретном файле
git diff --numstat file.txt	показывает количество строк, измененных в конкретном файле
git diff --staged		сравнивает staging index с репозиторием 
git diff --color-words file.txt	показывает изменение в файле, подсвеченное цветом
git diff origin/master..master	выводит разницу между локальной master и локальной копией master c удаленного репозитория
=======================================
Переименование

1. Переименовали в ОС, в git add новое название как новый файл, rm старое название. Когда это сделано, файл попадает в staging index и git сравнивает файлы. Если они совпадают хотя бы на 50%, он понимает, что это переименование (проверить можно командой git status).

2. git mv second_file.txt secondary_file.txt переименовывает файл И добавляет его сразу же в staging index

Эта же команда позволяет перемещать файлы:
git mv third_file.txt first_directory/third_file.txt
При этом git status покажет, что файл был переименован

=======================================

Команда GIT RESET

Перед началом reset'ов делаем git log и копируем в блокнот, чтобы у нас сохранились контрольные суммы и мы могли отмотать вперед-назад, если потребуется.

soft	меняет указатель HEAD, но рабочую директорию и staging index оставляет как было

mixed	меняет указатель HEAD (репозиторий) и staging index (рабочую директорию оставляет как было)

hard	меняет всё

git reset --soft 20b0b8898f 	сбрасывает указатель HEAD до уазанного коммита (отматывает назад или вперед, коммиты не удаляются, просто двигается указатель, и его потом можно вернуть)

git reset --mixed 20b0b8898f	переводим указатель на указанный коммит + обновляем staging index

git reset --hard 20b0b8898f	переводит указатель HEAD, обновляет staging index и рабочую директорию в соответствии с репозиторием (внимание: hard «отматывает» проект назад, но если мы сохранили хеш-суммы из git log, то сможем в ближайшее время «отмотать вперед». Однако скоро придет сборщик мусора и уничтожит все коммиты, которые мы отмотали).

=======================================

Слежение за пустыми папками

git предназначен для слежения за файлами, поэтому он не отслеживает пустые директории. Если нам нужно отследить пустую директорию, туда нужно положить файл. По общему соглашению это .gitkeep

touch assets/pdfs/.gitkeep	создаст пустой файл с указанным названием в директории

=======================================

Сравнение коммитов

При сравнении git сравнивает состояние директории после коммита А и после коммита Б. Он не сравнивает «разницу», которую заливает коммит. Он сравнивает директории в целом.

git diff 20b0b8898а		покажет разницу между нашей рабочей директорией и директорией на момент применения данного коммита

git diff 20b0b8898а text.txt	покажет разницу в файле между указанным коммитом и рабочей директорией

git diff 20b0b8898а..efbde7	показывает разницу между 2 указанными коммитами

git diff 20b0b8898а..efbde7 t.txt покажет изменения в файле с 1 по 2 коммит

git diff 20b0b8898а..HEAD

git diff HEAD..HEAD^

git diff -w 20b0b8898а..HEAD	проигнорирует все изменения в пробелах	

git diff -b 20b0b8898а..HEAD	не покажет добавление пробелов

git diff --stat --summary efbde7..HEAD выведет изменения в удобной форме

=======================================

Ветки

Список веток лежит в .git/refs/heads

git branch			выводит список веток [которые есть на этом компьютере]
git branch new_br		создает новую ветку
git checkout new_br		переходит на ветку
git checkout -b other_br	создает новую ветку из текущей и переходит на нее

git branch -m old_name new_name	переименовывает
git branch -d branch_name	удаляет

Сравнение веток

git diff master..new_br		сравнивает ветки master и new_br, master по идее старше, чем new_br; но мы можем менять их местами, тогда гит будет показывать данные наоборот
git diff master..new_br^	сравниваем с предпоследним коммитом new_br
git diff --color-words master..new_br	красиво подсвечивает изменения

git branch --merged		выводит список веток, которые полностью входят в текущую (фактически гит проверяет, есть ли в текущей ветке финальные коммиты остальных веток)

Merging branches

Делаем merge только с clean working directory: без незакоммиченных изменений. Чтобы потом не путаться.

Сначала переходим на ветку-получатель (которая будет поглощать другую ветку)
git checkout master
Теперь merg'им:
git merge new_branch

Fast-forward merge в master
		HEAD
master *--*--*--*
new_br		 *--*--*

Fast-forward возможен только если в master не было сделано ни одного коммита после ответвления new_br.
Git просматривает всю ветку от последнего коммита в ветке, которую хотим добавить, до первого коммита в master branch. Если коммит ветки master, на который указывает HEAD, есть в этой цепочке, Git делает Fast-forward merge. Он просто перетаскивает коммиты новой ветки в master и переносит указатель HEAD на последний коммит новой ветки (которая вливается в master). При этом Git не делает новых коммитов.

git merge --no-ff new_br	заставляет git делать коммит при merge веток (не fast-forward)
git merge --ff-only new_br	заставляет git делать merge только в режиме fast-forward (если git не сможет сделать fast-forward, пусть ничего не делает)

Real merge
		   HEAD
master *--*--*--*--*
new_br		 *--*--*

Если в master после ответвления new_br был сделан хотя бы один коммит, fast-forward сделать не получится. Нужен real merge с созданием отдельного коммита о merg'е.

Конфликт при merge

В ответ на попытку merge пишет CONFLICT и указывает, какие файлы кофликтуют. Также подробности есть в git status.

После этого в RS1 добавляет к названию ветки [...|MERGING]. 

Открываем файл, вызывающий конфликт. Так как мы находимся в состоянии MERGING, открывается файл, включающий куски из обеих веток. Эти куски помечены
<<<<<< HEAD
текст из одной ветки
=======
текст из другой ветки
>>>>>>>> new_br

Решение конфликтов
1. Abort merge			git merge --abort
2. Resolve manually
3. Use a merge tool		git mergetool  --tool=название
				git mergetool выведет список названий инструм.

Для ручного решения конфликта полезно смотреть последние коммиты в ветках:
git log --oneline -5		5 последних коммитов
git show 4a8dcb			показывает подробности по коммиту, выделяя разницу (внесенные изменения).

Проходимся и вручную вносим в один из вариантов изменения, которые есть в другом варианте. Проверяем, и когда все ок, то удаляем строки с <<< === >>>. В результате у нас должен получиться такой файл, как мы хотим видеть на выходе.

Теперь добавляем файл в staging index.
git add text.txt
git commit		сделает merge со стандартным комментарием (отдельно делать merge не нужно)

Чтобы поменьше возни с конфликтами:
1. Пишем короткие строки
2. Делаем коммиты короткими и сфокусированными на одной проблеме
	Не надо слоняться по документу и править
	все подряд (поправлю это,пока я тут)
3. Не делаем ненужных правок пробелов, табуляции, возврата строк
4. Делаем merg'и почаще, тогда конфликты будут меньше и не будут наростать.

master *--*--*--*--*--*--*--*--*--*--*
               /        /        /
new_br        *--*-----*--*--*--*

Сделав merge, мы можем продолжить работать с новой веткой и периодически замердживать ее снова, разрешая возникшие конфликты.
5. Поддерживайте синхронизацию с master branch, вливая ее в свои дополнительные ветки по мере того, как в master происходят изменения. Это называется tracking master branch.

=======================================

Заначки (stashes)

git stash save "changed mission title page"	сохраняет рабочую директорию и staging index в stash текущей ветки.
git stash save -u "includes untracked files"	сохраняет новые файлы в заначку. Не помню, сохраняет ли остальные 

Таким образом, мы «припрятываем» изменения и теперь можем спокойно переключать ветки — ничего не пропадет. Если у нас есть untracked files, это тоже можно сделать с помощью специальной команды вроде --include-untracked, подробности см. help

Заначки не имеют SHA, но имеют номера. Чтобы узнать номер, исп. команду:
git stash list				выводит список заначек

Ссылаться на заначку можно с помощью stash@{номер}

git stash show stash@{0}		выведет инф по заначке №0
git stash show -p stash@{0}		(от patch) покажет, что было сделано в заначку

Доступ ко всем заначкам у нас есть из всех веток. Мы можем начать делать в одной ветке, потом понять, что это не та ветка, спрятать в заначку, перейти на нужную ветку и достать из заначки.

git stash pop stash@{0}		применяет изменения к рабочей директории и удаляет заначку 0 (если заначка одна, то можно не указывать, какую)
git stash apply			применяет изменения к рабочей директории и оставляет в заначке

Если мы достали заначку не там, где хотели, можно сделать
git stash save "comment"	эти же изменения снова прячутся в заначку	

git stash drop stash@{0}	удаляем заначку
git stash clear			удаляет все заначки


=======================================

Удаленные репозитории

Все команды набираются из папки проекта
remotes — это URL на другие копии репозиториев
origin — это псевдоним сервера (URL'a), по которому лежит репозиторий
oringin/master — такая же branch, как и остальные. единственная разница — ее нельзя checkout



Информационные:
git remote			сообщает обо всех удаленных репозиториях, к которым подключен гит по данному проекту на машине
cat .git/config			показывает конфигурацию проекта, включающую инфу по удаленным репозиториям
ls -la .git/refs/remotes	показывает список удаленных серверов
ls -la .git/refs/remotes/origin	показывает список веток в уд. репозитор.
ls -la .git/refs/remotes/origin/master показывает SHA master'a

git log --oneline origin/master	показывает последние коммиты в локальной версии удаленного репозитория

git branch -r			показывает удаленные ветки
git branch -a			показывает все ветки, и локальные, и удаленные


git remote add <alias> <URL>	добавляет новый удаленный репозиторий (например, git remote add origin  https://github.com/aronskaya/explore_california.git)
git remote -v			показывает URL, который используется для push и fetch каждого удаленного репозитория
git remote rm <alias>		удаляет репозиторий (напр, git remote rm origin)

Отправляем ветку на удаленный сервер

Для того, чтобы отправить свои изменения на удаленный сервер, нам надо предварительно сделать fetch и merge их в свою рабочую ветку. Если мы пытаемся сделать push на сервер, на который кто-то уже делал пуши после того, как мы синхронизировались с сервером (fetch), то гит не даст нам это сделать.

git push -u origin master	пушаем ветку master в репо origin (пока не пушнем, она private; -u устанавливает связь между веткой, которую пушаем, и в которую запушиваем — когда связь установлена, можно делать просто git push. Фактически git push origin new_br — это сокращение от git push origin new_br:new_br (пушаем локальную ветку new_br в удаленную ветку new_br)

git push origin new_br		пушаем БЕЗ tracking (новая ветка на сервере не связывается с нашей локальной)


Запрашиваем данные с сервера

git clone <URL>			клонируем себе на машину репозиторий с гитхаба
git clone <URL> lynda_version	клонируем репозиторий в папку lynda_version

Когда у нас есть локальная версия репозитория, делаем fetch, а потом merge:

git fetch origin		запрашиваем себе origin (копия загружается в локальную копию удаленного сервера, НЕ в нашу рабочую директорию)
git fetch			сработает без указания, что хотим fetch, если у нас всего 1 сервер (remote)

3 rules:
1. Always fetch before you work
2. Fetch before you push (вдруг кто-то запушил что-то похожее)
3. Fetch often (нам ничего не мешает fetch often, т.к. данные загружаются в локальную копию удаленного репо, мы можем замерджить их к себе, а можем не мерджить)

Следующий шаг — merge скачанных при fetch изменений

git diff origin/master..master	сравниваем скачанную ветку с рабочей директорией

git merge origin/master		мерджим изменения к себе в ветку

git pull = git fetch + git merge

Как сделать себе копию remote branch (которые показываются по git branch -r):
git branch new_branch origin/new_branch	создает у нас локальную копию ветки
git checkout -b new_b origin/new_b	создает копию удаленной ветки и переходит на нее (первое new_b — имя новой ветки, origin/new_b — источник для ее создания)
git branch -d new_branch		удаляет нашу копию ветки

Удаление ветки с удаленного сервера
git push origin :new_br			удаляет ветку new_br
git push origin --delete new_br		более удобная команда для того же


=======================================

Collaboration

Последовательность действий

1. git checkout master
2. git fetch				загружаем с сервера актуальную версию
3. git merge origin/master		merg'им ее
4. git checkout -b feedback_form	заводим новую ветку, в которой будем разрабатывать новую фичу — страницу с формой обратной связи
делаем работу
5. git add feedback.html
6. git commit -m "Add customer feedback form"
7. git fetch				проверяю, не накоммитили еще чего-то на сервер, пока я работала (допустим, нет)
8. git push -u origin feedback_form	пушаем

Допустим, кто-то сделал новую ветку, и мы хотим на нее посмотреть и вообще.
git checkout -b feedback_form origin/feedback_form	создаем у себя копию
git log							смотрим, какие в ветке коммиты
git show feedback_form					смотрим подробности по ветке
git show 89b5a0o					смотрим подробности по любому коммиту
git commit -m "Add tour product to the form"		добавляем, меняем что-то
git fetch
git push

Допустим, кто-то внес изменения в ветку, и мы хотим посмотреть на них и вообще.
git fetch
git log -p feedback_form..origin/feedback_form	смотрим, какие внесены изменения. нам все нравится
git merge origin/feedback_form			мерджим
git checkout master
git fetch					проверяем, не изменилось ли чего, пока мы смотрели на изменения
git merge origin/master				если что-то поменялось, обновляем наш master
git merge feedback_form				добавляем новую утвержденную ветку в мастер
git push


Adding keyboard shortcuts
git config --global alias.st status		в глобальных настройках юзера st теперь будет значить status (если команда с пробелом, пишем ее в "")В файле .gitconfig появляется:
[alias]
	st = status
А можно и напрямую дальше добавлять новые shortcuts в файл .gitconfig
Еще:
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --global alias.df diff
git config --global alias.dfs "diff --staged"
git config --global alias.logg "log --graph --decorate --oneline --abbrev-commit --all"









 Git Commands.txt
 Desktop

 Created by Julia Vashchenko on 2015-12-14.
 Copyright 2015 Julia Vashchenko. All rights reserved.
